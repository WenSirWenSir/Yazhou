package com.zbyj.Yazhou.ProgramAct;import android.annotation.SuppressLint;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.GradientDrawable;import android.os.Bundle;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.View;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.Toast;import com.zbyj.Yazhou.LeftCompanyProgram.Tools;import com.zbyj.Yazhou.R;import com.zbyj.Yazhou.YazhouActivity;import java.util.ArrayList;public class ExchangeAct extends YazhouActivity {    private ArrayList<EditText> inputList = new ArrayList<EditText>();//输入code的编辑框    private LinearLayout inputBody;    @SuppressLint("ResourceType")    @Override    protected void onCreate(Bundle savedInstanceState) {        setContentView(R.layout.activity_exchange);        setStatusBar(getResources().getString(R.color.TextAndBodyColor));        init();        super.onCreate(savedInstanceState);    }    @SuppressLint({"ResourceType", "NewApi"})    public void init() {        //设置背景板        final GradientDrawable input_back = new GradientDrawable();        input_back.setStroke(5, Color.parseColor("#efefef"));        input_back.setColor(Color.parseColor("#efefef"));        input_back.setCornerRadius(10);        findViewById(R.id.activity_exchangeInputBackground).setBackground(input_back);        inputBody = findViewById(R.id.activity_exchangeInputExchangeCodeBody);        /**         * 循环取出EDITTEXT         */        for (int i = 0; i < 8; i++) {            RelativeLayout rl = (RelativeLayout) inputBody.getChildAt(i);            inputList.add((EditText) rl.getChildAt(0));        }        /**         * 循环设置EditText的background         */        Typeface typeface = Typeface.createFromAsset(getApplication().getAssets(), "font/main_number" +                ".ttf");        for (int i = 0; i < inputList.size(); i++) {            inputList.get(i).setBackground(Tools.setBackgroundType(2, getResources().getString(R                    .color.TextAndBodyColor), "#ffffff", 0));            inputList.get(i).setTypeface(typeface);        }        //设置监听事件        inputList.get(0).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(1).requestFocus();                }            }        });        inputList.get(1).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(2).requestFocus();                } else {                    inputList.get(0).requestFocus();                }            }        });        inputList.get(2).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(3).requestFocus();                } else {                    inputList.get(1).requestFocus();                }            }        });        inputList.get(3).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(4).requestFocus();                } else {                    inputList.get(2).requestFocus();                }            }        });        inputList.get(4).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(5).requestFocus();                } else {                    inputList.get(3).requestFocus();                }            }        });        inputList.get(5).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(6).requestFocus();                } else {                    inputList.get(4).requestFocus();                }            }        });        inputList.get(6).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    inputList.get(7).requestFocus();                } else {                    inputList.get(5).requestFocus();                }            }        });        inputList.get(7).addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s.toString())) {                    //不为空 下一个控件接受焦点                    StringBuffer stringBuffer = new StringBuffer();                    for (int i = 0; i < inputList.size(); i++) {                        stringBuffer.append(inputList.get(i).getText().toString());                    }                    Toast.makeText(getApplicationContext(), "输入的代码为:" + stringBuffer.toString(),                            Toast.LENGTH_LONG).show();                } else {                    inputList.get(6).requestFocus();                }            }        });        Linstener();    }    private void Linstener() {        /**         * 退出监听         */        findViewById(R.id.activity_exchange_icoBack).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }}