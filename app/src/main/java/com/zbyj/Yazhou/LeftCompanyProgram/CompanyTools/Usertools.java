package com.zbyj.Yazhou.LeftCompanyProgram.CompanyTools;import android.content.Context;import android.util.Log;import com.zbyj.Yazhou.LeftCompanyProgram.CompanyPage.USER_KEY_PAGE;import com.zbyj.Yazhou.LeftCompanyProgram.CompanyPage.XMLUserAddr;import com.zbyj.Yazhou.LeftCompanyProgram.Config;import com.zbyj.Yazhou.LeftCompanyProgram.Interface.ProgramInterface;import com.zbyj.Yazhou.LeftCompanyProgram.Net;import com.zbyj.Yazhou.LeftCompanyProgram.Tools;import java.io.InputStream;import java.net.URLEncoder;import java.util.ArrayList;/** * 公司获取用户的信息资料的操作API */public class Usertools {    /**     * 获取用户的所有的资料信息     */    public static void getUservalues(Context mContext, final ProgramInterface programInterface) {        String token = Tools.gettoKen(mContext, USER_KEY_PAGE.KEY_TOKEN);        String phone = Tools.gettoKen(mContext, USER_KEY_PAGE.KEY_USERPHONE);        Net.InterServiceGet(mContext, Config.HTTP_ADDR.getUser_init(), new Net                .onVisitInterServiceListener() {            @Override            public void onSucess(String tOrgin) {                if (programInterface != null) {                    programInterface.onSucess(tOrgin, 0);                }            }            @Override            public void onNotConnect() {                if (programInterface != null) {                    programInterface.onFaile("", 0);                }            }            @Override            public void onFail(String tOrgin) {                if (programInterface != null) {                    programInterface.onFaile("", 0);                }            }        }, Config.HttpMethodUserAction.KEY_ACTION, "" + Config.HttpMethodUserAction.GET_USERVAL,                Config.HttpMethodUserAction.KEY_USER, Tools.getStringMD5(phone), Config                        .HttpMethodUserAction.KEY_TOKEN, token);    }    /**     * 获取用户的默认地址     */    public static void getUserdefaultaddr() {    }    /**     * 获取用户的所有地址     */    public static void getUserAllAddr(Context mContext, final ProgramInterface.XMLforUserAllAddr            xmLforUserAllAddr) {        String phone_md5 = Tools.getStringMD5(Tools.gettoKen(mContext, USER_KEY_PAGE                .KEY_USERPHONE));        String token = Tools.gettoKen(mContext, USER_KEY_PAGE.KEY_TOKEN);        Net.getXMLInterGet(mContext, Config.HTTP_ADDR.getallAddr(), new ProgramInterface                .XMLDomServiceInterface() {            @Override            public void onSucess(InputStream is) {                try {                    ArrayList<XMLUserAddr> list = Tools.XMLDomeService(is);                    if (list != null) {                        if (xmLforUserAllAddr != null) {                            xmLforUserAllAddr.onDone(list);                        } else {                            Log.e(Config.DEBUG, "Usertools.java[+]XML解析回调为NULL");                        }                    } else {                        if (xmLforUserAllAddr != null) {                            Log.e(Config.DEBUG, "Usertools.java[+]XML解析回调为NULL");                            xmLforUserAllAddr.onFain();//解析失败                        } else {                            Log.e(Config.DEBUG, "Usertools.java[+]XML解析回调为NULL");                        }                    }                } catch (Exception e) {                    Log.e(Config.DEBUG, "Usertools.java[+]XML解析错误" + e.getMessage());                }            }            @Override            public void onFain() {                if (xmLforUserAllAddr != null) {                    xmLforUserAllAddr.onFain();                }            }            @Override            public void onNotService() {                if (xmLforUserAllAddr != null) {                    xmLforUserAllAddr.onFain();                }            }        }, Config.HttpMethodUserAction.KEY_ACTION, Config.HttpMethodUserAction.GET_ALLADDR,                Config.HttpMethodUserAction.KEY_USER, phone_md5, Config.HttpMethodUserAction                        .KEY_TOKEN, token);    }    /**     * 用户插入一条收件地址     *     * @param mContext    上下文     * @param name        用户名     * @param phone       电话     * @param addr        地址     * @param physics_add 物理地址     * @param addr_in     所属区域     * @param sex         性别     * @param year        年龄     * @param aDefault    是否默认     * @param phone_md5   phone_md5 验证     * @param token       token 验证     */    public static void insertUseraddr(Context mContext, String name, String phone, String addr,                                      String physics_add, String addr_in, int sex, String year,                                      String aDefault, String phone_md5, String token, final                                      ProgramInterface programInterface) {        physics_add = URLEncoder.encode(physics_add);//编码        Net.InterServiceGet(mContext, Config.HTTP_ADDR.getUser_init(), new Net                .onVisitInterServiceListener() {            @Override            public void onSucess(String tOrgin) {                if (programInterface != null) {                    programInterface.onSucess(tOrgin, 0);                }            }            @Override            public void onNotConnect() {                if (programInterface != null) {                    programInterface.onFaile("", 0);                }            }            @Override            public void onFail(String tOrgin) {                if (programInterface != null) {                    programInterface.onFaile("", 0);                }            }        }, Config.HttpMethodUserAction.KEY_ACTION, Config.HttpMethodUserAction.INSERT_USER_ADDR,                Config.HttpMethodUserAction.KEY_USER, phone_md5, Config.HttpMethodUserAction                        .KEY_TOKEN, token, Config.HttpMethodUserAction.KEY_ADDR_ADDR, addr,                Config.HttpMethodUserAction.KEY_PHYSICS_ADDR, physics_add, Config                        .HttpMethodUserAction.KEY_ADDR_IN, addr_in, Config.HttpMethodUserAction                        .KEY_ADDR_NAME, name, Config.HttpMethodUserAction.KEY_ADDR_TEL, phone,                Config.HttpMethodUserAction.KEY_ADDR_DEFAULT, aDefault, Config                        .HttpMethodUserAction.KEY_ADDR_USER_SEX, "" + sex, Config                        .HttpMethodUserAction.KEY_ADDR_USER_YEAR, year);    }}