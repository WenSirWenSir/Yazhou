package com.zbyj.Yazhou.LeftCompanyProgram.Views;import android.content.Context;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.VelocityTracker;import android.view.View;import android.view.ViewConfiguration;import android.view.ViewGroup;import android.widget.Scroller;public class PullUptoLoadMore extends ViewGroup {    myscrollView topScrollView, bottomScrollview;    VelocityTracker velocityTracker = VelocityTracker.obtain();    Scroller scroller = new Scroller(getContext());    int currPosition = 0;    int position1Y;    int lastY;    public int scaledTouchSlop;    int speed = 200;    boolean isIntercept;    public boolean bootomScrollViewIsIntop = false;    public boolean TopScrollViewIsBottom = false;    public PullUptoLoadMore(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init();    }    @Override    protected void onLayout(boolean changed, int l, int t, int r, int b) {        int childCount = getChildCount();        int childTop = 0;        for(int i = 0;i < childCount;i++){            View child = getChildAt(i);            child.layout(l,childTop,r,childTop + child.getMeasuredHeight());            childTop += child.getMeasuredHeight();        }    }    public PullUptoLoadMore(Context context, AttributeSet attrs) {        super(context, attrs);        init();    }    public PullUptoLoadMore(Context context) {        super(context);        init();    }    private void init() {        post(new Runnable() {            @Override            public void run() {                topScrollView = (myscrollView) getChildAt(0);                bottomScrollview = (myscrollView) getChildAt(1);                topScrollView.setScrollListener(new myscrollView.ScrollListener() {                    @Override                    public void onScrollToBottom() {                        TopScrollViewIsBottom = true;                    }                    @Override                    public void onScrollToTop() {                    }                    @Override                    public void onScroll(int scrollY) {                    }                    @Override                    public void notBottom() {                        TopScrollViewIsBottom = false;                    }                });                bottomScrollview.setScrollListener(new myscrollView.ScrollListener() {                    @Override                    public void onScrollToBottom() {                    }                    @Override                    public void onScrollToTop() {                    }                    @Override                    public void onScroll(int scrollY) {                        if (scrollY == 0) {                            bootomScrollViewIsIntop = true;                        } else {                            bootomScrollViewIsIntop = false;                        }                    }                    @Override                    public void notBottom() {                    }                });                position1Y = topScrollView.getBottom();                scaledTouchSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();            }        });    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        this.requestDisallowInterceptTouchEvent(false);        return super.dispatchTouchEvent(ev);    }    @Override    public boolean onInterceptTouchEvent(MotionEvent ev) {        int y = (int) ev.getY();        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                lastY = y;                break;            case MotionEvent.ACTION_MOVE:                if (TopScrollViewIsBottom) {                    int dy = lastY - y;                    if (dy > 0 && currPosition == 0) {                        if (dy >= scaledTouchSlop) {                            isIntercept = true;                            lastY = y;                        }                    }                }                if (bootomScrollViewIsIntop) {                    int dy = lastY - y;                    if (dy < 0 && currPosition == 1) {                        if (Math.abs(dy) >= scaledTouchSlop) {                            isIntercept = true;                        }                    }                }                break;            case MotionEvent.ACTION_UP:                break;        }        return isIntercept;    }    @Override    public boolean onTouchEvent(MotionEvent event) {        int y = (int) event.getY();        velocityTracker.addMovement(event);        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN:                break;            case MotionEvent.ACTION_UP:                isIntercept = false;                velocityTracker.computeCurrentVelocity(1000);                float yVelocity = velocityTracker.getYVelocity();                if (currPosition == 0) {                    if (yVelocity < 0 && yVelocity < -speed) {                        smoothScroll(position1Y);                        currPosition = 1;                    }                    else{                        smoothScroll(0);                    }                }                else{                    if(yVelocity >0 && yVelocity > speed){                        smoothScroll(0);                        currPosition = 0;                    }                    else{                        smoothScroll(position1Y);                    }                }                break;            case MotionEvent.ACTION_MOVE:                int dy = lastY - y;                if (getScrollY() + dy < 0) {                    dy = getScrollY() + dy + Math.abs(getScrollY() + dy);                }                if (getScrollY() + dy + getHeight() > bottomScrollview.getBottom()) {                    dy = dy - (getScrollY() + dy - (bottomScrollview.getBottom() - getHeight()));                }                scrollBy(0, dy);                break;        }        lastY = y;        return true;    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        measureChildren(widthMeasureSpec,heightMeasureSpec);    }    public void smoothScroll(int tartY){            int dy = tartY - getScrollY();            scroller.startScroll(getScrollX(),getScrollY(),0,dy);            invalidate();    }    public void scrollToTop(){        smoothScroll(0);        currPosition  = 0;        topScrollView.smoothScrollTo(0,0);    }    public void computeScroll(){        if(scroller.computeScrollOffset()){            scrollTo(scroller.getCurrX(),scroller.getCurrY());            postInvalidate();        }    }}